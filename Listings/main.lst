C51 COMPILER V9.54   MAIN                                                                  05/23/2015 22:58:34 PAGE 1   


C51 COMPILER V9.54, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\Objects\main.obj
COMPILER INVOKED BY: D:\Program Files (x86)\Keil\C51\BIN\C51.EXE main.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRIN
                    -T(.\Listings\main.lst) OBJECT(.\Objects\main.obj)

line level    source

   1          #include "Main.h"
*** WARNING C312 IN LINE 110 OF Main.h: misplaced endif control
   2          #include "Sch51.h"
   3          #include "LED_flash.h"
   4          
   5          extern sTask SCH_tasks_G[SCH_MAX_TASKS];
   6          extern tByte Error_code_G;
   7          
   8          void main(void)
   9             {
  10   1         // Set up the scheduler
  11   1         SCH_Init_T2();
  12   1      
  13   1         // Prepare for the 'Flash_LED' task
  14   1         LED_Flash_Init();
  15   1      
  16   1         // Add the 'Flash LED' task (on for ~1000 ms, off for ~1000 ms)
  17   1         // - timings are in ticks (50 ms tick interval)
  18   1         // (Max interval / delay is 65535 ticks)
  19   1         SCH_Add_Task(LED_Flash_Update, 0, 20);
  20   1      
  21   1         // Start the scheduler
  22   1         SCH_Start();
  23   1      
  24   1         while(1)
  25   1            {
  26   2            SCH_Dispatch_Tasks();
  27   2            }
  28   1         }
  29          
  30          void SCH_Init_T2(void)
  31          {
  32   1        tByte i;
  33   1      
  34   1         for (i = 0; i < SCH_MAX_TASKS; i++)
  35   1            {
  36   2            SCH_Delete_Task(i);
  37   2            }
  38   1      
  39   1         // Reset the global error variable
  40   1         // - SCH_Delete_Task() will generate an error code,
  41   1         //   (because the task array is empty)
  42   1         Error_code_G = 0;
  43   1      // Now set up Timer 2
  44   1         // 16-bit timer function with automatic reload
  45   1      
  46   1         // Crystal is assumed to be 11.0592 MHz
  47   1         // Assume 12 osc cycles per timer increment
  48   1         // -> timer resolution is 0.000001085069444444 seconds (1.085)
  49   1         // The required Timer 2 overflow is 0.050 seconds (50 ms)
  50   1         // - this takes 46080 timer ticks
  51   1         // Reload value is 65536 - 46080 = 19456 (dec) = 0x4C00
  52   1         //FC66,1ms
  53   1         //
C51 COMPILER V9.54   MAIN                                                                  05/23/2015 22:58:34 PAGE 2   

  54   1        T2CON = 0x04;
  55   1        T2MOD = 0x00;
  56   1        TH2 = 0x4C;
  57   1        TL2 = 0X00;
  58   1        RCAP2H = 0X4C;
  59   1        RCAP2L = 0X00;
  60   1        ET2 = 1;
  61   1        TR2 = 1;
  62   1      }
  63          void SCH_Start(void)
  64             {
  65   1         EA = 1;
  66   1         }
  67          
  68          /*------------------------------------------------------------------*-
  69          
  70            SCH_Update
  71          
  72            This is the scheduler ISR.  It is called at a rate
  73            determined by the timer settings in SCH_Init().
  74            This version is triggered by Timer 2 interrupts:
  75            timer is automatically reloaded.
  76          
  77          -*------------------------------------------------------------------*/
  78          void SCH_Update(void) interrupt INTERRUPT_Timer_2_Overflow
  79             {
  80   1         tByte Index;
  81   1      
  82   1         TF2 = 0; // Clear flag
  83   1      
  84   1         // NOTE: calculations are in *TICKS* (not milliseconds)
  85   1         for (Index = 0; Index < SCH_MAX_TASKS; Index++)
  86   1            {
  87   2            // Check if there is a task at this location
  88   2            if (SCH_tasks_G[Index].pTask)
  89   2               {
  90   3               if (SCH_tasks_G[Index].Delay == 0)
  91   3                  {
  92   4                  // The task is due to run
  93   4                  SCH_tasks_G[Index].RunMe = 1;  // Set the run flag
  94   4      
  95   4                  if (SCH_tasks_G[Index].Period)
  96   4                     {
  97   5                     // Schedule periodic tasks to run again
  98   5                     SCH_tasks_G[Index].Delay = SCH_tasks_G[Index].Period;
  99   5                     }
 100   4                  }
 101   3               else
 102   3                  {
 103   4                  // Not yet ready to run: just decrement the delay
 104   4                  SCH_tasks_G[Index].Delay -= 1;
 105   4                  }
 106   3               }
 107   2            }
 108   1         }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    197    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
C51 COMPILER V9.54   MAIN                                                                  05/23/2015 22:58:34 PAGE 3   

   DATA SIZE        =   ----       1
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  1 WARNING(S),  0 ERROR(S)
